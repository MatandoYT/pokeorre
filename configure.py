#!/usr/bin/env python3

###
# Generates build files for the project.
# This file also includes the project configuration,
# such as compiler flags and the object matching status.
#
# Usage:
#   python3 configure.py
#   ninja
#
# Append --help to see available options.
###

import argparse
import sys
from pathlib import Path
from typing import Any, Dict, List

from tools.project import (
    Object,
    ProjectConfig,
    calculate_progress,
    generate_build,
    is_windows,
)

# Game versions
DEFAULT_VERSION = 0
VERSIONS = [
     "NXXJ01",  # 0
#     "GXXE01",  # 1
]

parser = argparse.ArgumentParser()
parser.add_argument(
    "mode",
    choices=["configure", "progress"],
    default="configure",
    help="script mode (default: configure)",
    nargs="?",
)
parser.add_argument(
    "-v",
    "--version",
    choices=VERSIONS,
    type=str.upper,
    default=VERSIONS[DEFAULT_VERSION],
    help="version to build",
)
parser.add_argument(
    "--build-dir",
    metavar="DIR",
    type=Path,
    default=Path("build"),
    help="base build directory (default: build)",
)
parser.add_argument(
    "--binutils",
    metavar="BINARY",
    type=Path,
    help="path to binutils (optional)",
)
parser.add_argument(
    "--compilers",
    metavar="DIR",
    type=Path,
    help="path to compilers (optional)",
)
parser.add_argument(
    "--map",
    action="store_true",
    help="generate map file(s)",
)
parser.add_argument(
    "--debug",
    action="store_true",
    help="build with debug info (non-matching)",
)
if not is_windows():
    parser.add_argument(
        "--wrapper",
        metavar="BINARY",
        type=Path,
        help="path to wibo or wine (optional)",
    )
parser.add_argument(
    "--dtk",
    metavar="BINARY | DIR",
    type=Path,
    help="path to decomp-toolkit binary or source (optional)",
)
parser.add_argument(
    "--objdiff",
    metavar="BINARY | DIR",
    type=Path,
    help="path to objdiff-cli binary or source (optional)",
)
parser.add_argument(
    "--sjiswrap",
    metavar="EXE",
    type=Path,
    help="path to sjiswrap.exe (optional)",
)
parser.add_argument(
    "--verbose",
    action="store_true",
    help="print verbose output",
)
parser.add_argument(
    "--non-matching",
    dest="non_matching",
    action="store_true",
    help="builds equivalent (but non-matching) or modded objects",
)
args = parser.parse_args()

config = ProjectConfig()
config.version = str(args.version)
version_num = VERSIONS.index(config.version)

# Apply arguments
config.build_dir = args.build_dir
config.dtk_path = args.dtk
config.objdiff_path = args.objdiff
config.binutils_path = args.binutils
config.compilers_path = args.compilers
config.debug = args.debug
config.generate_map = args.map
config.non_matching = args.non_matching
config.sjiswrap_path = args.sjiswrap
if not is_windows():
    config.wrapper = args.wrapper
# Don't build asm unless we're --non-matching
if not config.non_matching:
    config.asm_dir = None

# Tool versions
config.binutils_tag = "2.42-1"
config.compilers_tag = "20240706"
config.dtk_tag = "v0.9.4"
config.objdiff_tag = "v2.0.0-beta.3"
config.sjiswrap_tag = "v1.1.1"
config.wibo_tag = "0.6.11"

# Project
config.config_path = Path("config") / config.version / "config.yml"
config.check_sha_path = Path("config") / config.version / "build.sha1"
config.asflags = [
    "-mgekko",
    "--strip-local-absolute",
    "-I include",
    f"-I build/{config.version}/include",
    f"--defsym version={version_num}",
]
config.ldflags = [
    "-fp hardware",
    "-nodefaults",
    # "-warn off",
    # "-listclosure", # Uncomment for Wii linkers
]
# Use for any additional files that should cause a re-configure when modified
config.reconfig_deps = []

# Base flags, common to most GC/Wii games.
# Generally leave untouched, with overrides added below.
cflags_base = [
    "-nodefaults",
    "-proc gekko",
    "-align powerpc",
    "-enum int",
    "-fp hardware",
    "-Cpp_exceptions off",
    # "-W all",
    "-O4,p",
    "-inline auto",
    '-pragma "cats off"',
    '-pragma "warn_notinlined off"',
    "-maxerrors 1",
    "-nosyspath",
    "-RTTI off",
    "-fp_contract on",
    "-str reuse",
    "-multibyte",  # For Wii compilers, replace with `-enc SJIS`
    "-i include",
    f"-i build/{config.version}/include",
    f"-DVERSION={version_num}",
]

# Debug flags
if config.debug:
    cflags_base.extend(["-sym on", "-DDEBUG=1"])
else:
    cflags_base.append("-DNDEBUG=1")

# Metrowerks library flags
cflags_runtime = [
    *cflags_base,
    "-use_lmw_stmw on",
    "-str reuse,pool,readonly",
    "-gccinc",
    "-common off",
    "-inline auto",
]

# REL flags
cflags_rel = [
    *cflags_base,
    "-sdata 0",
    "-sdata2 0",
]

config.linker_version = "GC/1.3.2"


# Helper function for Dolphin libraries
def DolphinLib(lib_name: str, objects: List[Object]) -> Dict[str, Any]:
    return {
        "lib": lib_name,
        "mw_version": "GC/1.2.5n",
        "cflags": cflags_base,
        "host": False,
        "objects": objects,
    }


# Helper function for REL script objects
def Rel(lib_name: str, objects: List[Object]) -> Dict[str, Any]:
    return {
        "lib": lib_name,
        "mw_version": "GC/1.3.2",
        "cflags": cflags_rel,
        "host": True,
        "objects": objects,
    }


Matching = True                   # Object matches and should be linked
NonMatching = False               # Object does not match and should not be linked
Equivalent = config.non_matching  # Object should be linked when configured with --non-matching

config.warn_missing_config = True
config.warn_missing_source = False
config.libs = [
    {
        "lib": "game",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "character.o"),
            Object(Matching, "relglobal.o"),
            Object(Matching, "dbgMenuCamera.o"),
            Object(Matching, "dbgMenuFight.o"),
            Object(Matching, "dbgMenuFlag.o"),
            Object(Matching, "dbgMenuPokemon.o"),
            Object(Matching, "dbgMenuHero.o"),
            Object(Matching, "dbgMenuFloor.o"),
            Object(Matching, "dbgMenuGSgfx.o"),
            Object(Matching, "dbgMenuGSvtr.o"),
            Object(Matching, "dbgMenuMemcard.o"),
            Object(Matching, "menuData.o"),
            Object(Matching, "dbgMenuMsg.o"),
            Object(Matching, "dbgMenuPeople.o"),
            Object(Matching, "dbgMenuSoundTest.o"),
            Object(Matching, "dbgMenuWazaViewer.o"),
            Object(Matching, "dbgMenuWaza.o"),
            Object(Matching, "menuTool.o"),
            Object(Matching, "menuColosseumBattleConnection.o"),
            Object(Matching, "dbgMenuFightTrainer.o"),
            Object(Matching, "menuSeq.o"),
            Object(Matching, "menuSprite.o"),
            Object(Matching, "dbgMenuFightWaza.o"),
            Object(Matching, "dbgMenuLog.o"),
            Object(Matching, "dbgMenuFieldCamera.o"),
            Object(Matching, "dbgMenuItemCreate.o"),
            Object(Matching, "dbgMenuRelive.o"),
            Object(Matching, "menuPokeCoupon.o"),
            Object(Matching, "dbgMenuToolBattle.o"),
            Object(Matching, "menuKeyDisc.o"),
            Object(Matching, "global_destructor_chain.o"),
            Object(Matching, "pause.o"),
            Object(Matching, "time.o"),
            Object(Matching, "menuPocketBattleDisk.o"),
            Object(Matching, "main.o"),
            Object(Matching, "sysvars.o"),
            Object(Matching, "flashmenuTest.o"),
            Object(Matching, "menuWorldMapMX.o"),
            Object(Matching, "menuItemMX.o"),
            Object(Matching, "menuPokemon.o"),
            Object(Matching, "menuFightStatus.o"),
            Object(Matching, "menuFight.o"),
            Object(Matching, "menuPocketTool.o"),
            Object(Matching, "menuPocket.o"),
            Object(Matching, "gbaPokemon.o"),
            Object(Matching, "gbaCommand.o"),
            Object(Matching, "agbCommunication.o"),
            Object(Matching, "floorRead.o"),
            Object(Matching, "menuTop.o"),
            Object(Matching, "menuNameEntry.o"),
            Object(Matching, "menuPokemonStatus.o"),
            Object(Matching, "menuItemTool.o"),
            Object(Matching, "menuSaveLoad.o"),
            Object(Matching, "menuPda.o"),
            Object(Matching, "menuReliveHall.o"),
            Object(Matching, "menuPdaSearcher.o"),
            Object(Matching, "menuPdaMailXD.o"),
            Object(Matching, "menuPdaMailList.XD.o"),
            Object(Matching, "menuColosseumBattle.o"),
            Object(Matching, "menuCB_BattleResult.o"),
            Object(Matching, "menuCB_BattleStart.o"),
            Object(Matching, "menuCB_Bios.o"),
            Object(Matching, "menuCB_Common.o"),
            Object(Matching, "menuCB_Debug.o"),
            Object(Matching, "menuCB_ItemList.o"),
            Object(Matching, "menuCB_PokemonEntry.o"),
            Object(Matching, "menuCB_Rule.o"),
            Object(Matching, "menuCB_Battle.o"),
            Object(Matching, "menuToolBattle.o"),
            Object(Matching, "menuGBAC.o"),
            Object(Matching, "menuPdaDPMonitor.o"),
            Object(Matching, "menuPdaDPMonitorList.o"),
            Object(Matching, "menuPdaSub.o"),
            Object(Matching, "menuPdaMemoXD.o"),
            Object(Matching, "menuPdaMemoListXD.o"),
            Object(Matching, "menuPcBoxPokemon.o"),
            Object(Matching, "menuField.o"),
            Object(Matching, "pokecolo.o"),
            Object(Matching, "menuScript.o"),
            Object(Matching, "menuReliveMeter.o"),
            Object(Matching, "menuShop.o"),
            Object(Matching, "menuPocketCologne.o"),
            Object(Matching, "menuItemPda.o"),
            Object(Matching, "menuSub.o"),
            Object(Matching, "menuPdaMemoWaveXD.o"),
            Object(Matching, "menuInterrupt.o"),
            Object(Matching, "dbgMenuSub.o"),
            Object(Matching, "menuPcBoxNew.o"),
            Object(Matching, "menuPcBoxDouguNew.o"),
            Object(Matching, "dbgMenuMenu.o"),
            Object(Matching, "pokeconv.o"),
            Object(Matching, "wazaconv.o"),
            Object(Matching, "menuCB_externDB.o"),
            Object(Matching, "menuDataBios.o"),
            Object(Matching, "menuPanel.o"),
            Object(Matching, "floorLayerConfig.o"),
            Object(Matching, "menuCB_Sub1.o"),
            Object(Matching, "menuLogoDemo.o"),
            Object(Matching, "menuHologram.o"),
            Object(Matching, "menuBingo.o"),
            Object(Matching, "menuItemBT.o"),
            Object(Matching, "menuReliveHallTutorial.o"),
            Object(Matching, "menuPokemonChange.o"),
            Object(Matching, "menuWorldMapMoveDemo.o"),
            Object(Matching, "menuWorldMapModel.o"),
            Object(Matching, "menuItem.o"),
            Object(Matching, "menuBattleDisk.o"),
            Object(Matching, "menuItemXD.o"),
            Object(Matching, "menuOrreColosseum.o"),
            Object(Matching, "menuTitle.o"),
            Object(Matching, "menuUseItem.o"),
            Object(Matching, "menuItemDebugRelease.o"),
            Object(Matching, "menuMewWaza.o"),
            Object(Matching, "menuMoveDemo.o"),
            Object(Matching, "menuTitleOption.o"),
        ],
    },
    {
        "lib": "GSmemman.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSmemman.a/GSmemman.o"),
            Object(Matching, "GSmemman.a/memOverride.o"),
            Object(Matching, "GSmemman.a/OSAlloc.o"),
            Object(Matching, "GSmemman.a/sysdolmem.o"),
            Object(Matching, "GSmemman.a/poolAlloc.o"),
        ],
    },
    {
        "lib": "base.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "base.a/PPCArch.o"),
        ],
    },
    {
        "lib": "os.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "os.a/OS.o"),
            Object(Matching, "os.a/OSAlarm.o"),
            Object(Matching, "os.a/OSArena.o"),
            Object(Matching, "os.a/OSAudioSystem.o"),
            Object(Matching, "os.a/OSCache.o"),
            Object(Matching, "os.a/OSContext.o"),
            Object(Matching, "os.a/OSError.o"),
            Object(Matching, "os.a/OSExec.o"),
            Object(Matching, "os.a/OSFatal.o"),
            Object(Matching, "os.a/OSFont.o"),
            Object(Matching, "os.a/OSInterrupt.o"),
            Object(Matching, "os.a/OSLink.o"),
            Object(Matching, "os.a/OSMemory.o"),
            Object(Matching, "os.a/OSMutex.o"),
            Object(Matching, "os.a/OSReboot.o"),
            Object(Matching, "os.a/OSReset.o"),
            Object(Matching, "os.a/OSResetSW.o"),
            Object(Matching, "os.a/OSRtc.o"),
            Object(Matching, "os.a/OSSync.o"),
            Object(Matching, "os.a/OSThread.o"),
            Object(Matching, "os.a/__start.o"),
            Object(Matching, "os.a/OSTime.o"),
            Object(Matching, "os.a/__ppc_eabi_init.o"),
            Object(Matching, "os.a/db.o"),
        ],
    },
    {
        "lib": "db.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "db.a/db.o"),
        ],
    },
    {
        "lib": "mtx.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "mtx.a/mtx.o"),
            Object(Matching, "mtx.a/mtxvec.o"),
            Object(Matching, "mtx.a/mtx44.o"),
            Object(Matching, "mtx.a/vec.o"),
            Object(Matching, "mtx.a/quat.o"),
        ],
    },
    {
        "lib": "dvd.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "dvd.a/dvdlow.o"),
            Object(Matching, "dvd.a/dvdfs.o"),
            Object(Matching, "dvd.a/dvd.o"),
            Object(Matching, "dvd.a/dvdqueue.o"),
            Object(Matching, "dvd.a/dvderror.o"),
            Object(Matching, "dvd.a/dvdidutils.o"),
            Object(Matching, "dvd.a/dvdFatal.o"),
            Object(Matching, "dvd.a/fstload.o"),
        ],
    },
    {
        "lib": "vi.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "vi.a/vi.o"),
        ],
    },
    {
        "lib": "pad.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "pad.a/Pad.o"),
        ],
    },
    {
        "lib": "ai.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "ai.a/ai.o"),
        ],
    },
    {
        "lib": "ar.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "ar.a/ar.o"),
            Object(Matching, "ar.a/arq.o"),
        ],
    },
    {
        "lib": "dsp.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "dsp.a/dsp.o"),
            Object(Matching, "dsp.a/dsp_debug.o"),
            Object(Matching, "dsp.a/dsp_task.o"),
        ],
    },
    {
        "lib": "card.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "card.a/CARDBios.o"),
            Object(Matching, "card.a/CARDUnlock.o"),
            Object(Matching, "card.a/CARDRdwr.o"),
            Object(Matching, "card.a/CARDBlock.o"),
            Object(Matching, "card.a/CARDDir.o"),
            Object(Matching, "card.a/CARDCheck.o"),
            Object(Matching, "card.a/CARDMount.o"),
            Object(Matching, "card.a/CARDFormat.o"),
            Object(Matching, "card.a/CARDOpen.o"),
            Object(Matching, "card.a/CARDCreate.o"),
            Object(Matching, "card.a/CARDRead.o"),
            Object(Matching, "card.a/CARDWrite.o"),
            Object(Matching, "card.a/CARDDelete.o"),
            Object(Matching, "card.a/CARDStat.o"),
            Object(Matching, "card.a/CARDStatEx.o"),
            Object(Matching, "card.a/CARDNet.o"),
        ],
    },
    {
        "lib": "gx.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "gx.a/GXInit.o"),
            Object(Matching, "gx.a/GXFifo.o"),
            Object(Matching, "gx.a/GXAttr.o"),
            Object(Matching, "gx.a/GXMisc.o"),
            Object(Matching, "gx.a/GXGeometry.o"),
            Object(Matching, "gx.a/GXFrameBuf.o"),
            Object(Matching, "gx.a/GXLight.o"),
            Object(Matching, "gx.a/GXTexture.o"),
            Object(Matching, "gx.a/GXBump.o"),
            Object(Matching, "gx.a/GXTev.o"),
            Object(Matching, "gx.a/GXPixel.o"),
            Object(Matching, "gx.a/GXDraw.o"),
            Object(Matching, "gx.a/GXDisplayList.o"),
            Object(Matching, "gx.a/GXTransform.o"),
            Object(Matching, "gx.a/GXPerf.o"),
        ],
    },
    {
        "lib": "perf.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "perf.a/perf.o"),
            Object(Matching, "perf.a/perfdraw.o"),
        ],
    },
    {
        "lib": "TRK_MINNOW_DOLPHIN.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/mainloop.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/nubevent.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/nubinit.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/msg.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/msgbuf.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/serpoll.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/usr_put.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/dispatch.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/msghndlr.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/support.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/mutex_TRK.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/notify.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/flush_cache.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/mem_TRK.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/targimpl.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/targsupp.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/mpc_7xx_603e.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/__exception.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/dolphin_trk.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/main_TRK.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/dolphin_trk_glue.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/targcont.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/target_options.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/mslsupp.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/UDP_Stubs.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/main.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/CircleBuffer.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/main_gdev.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/MWTrace.o"),
            Object(Matching, "TRK_MINNOW_DOLPHIN.a/MWCriticalSection_gc.o"),
        ],
    },
    {
        "lib": "Runtime.PPCEABI.H.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "Runtime.PPCEABI.H.a/__va_arg.o"),
            Object(Matching, "Runtime.PPCEABI.H.a/CPlusLibPPC.o"),
            Object(Matching, "Runtime.PPCEABI.H.a/NMWException.o"),
            Object(Matching, "Runtime.PPCEABI.H.a/runtime.o"),
            Object(Matching, "Runtime.PPCEABI.H.a/__init_cpp_exceptions.o"),
            Object(Matching, "Runtime.PPCEABI.H.a/Gecko_ExceptionPPC.o"),
            Object(Matching, "Runtime.PPCEABI.H.a/GCN_mem_alloc.o"),
            Object(Matching, "Runtime.PPCEABI.H.a/__mem.o"),
        ],
    },
    {
        "lib": "MSL_C.PPCEABI.bare.H.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/abort_exit.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/alloc.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/errno.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/ansi_files.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/ansi_fp.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/arith.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/buffer_io.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/critical_regions.gamecube.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/ctype.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/locale.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/direct_io.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/file_io.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/FILE_POS.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/mbstring.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/mem.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/mem_funcs.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/misc_io.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/printf.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/float.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/qsort.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/scanf.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/string.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/strtold.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/strtoul.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/wchar_io.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/uart_console_io_gcn.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_acos.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_asin.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_atan2.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_exp.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_fmod.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_log.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_pow.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_rem_pio2.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/k_cos.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/k_rem_pio2.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/k_sin.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/k_tan.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_atan.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_ceil.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_copysign.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_cos.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_floor.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_frexp.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_ldexp.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_modf.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_sin.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/s_tan.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_acos.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_asin.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_atan2.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_exp.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_fmod.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_log.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_pow.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/e_sqrt.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/math_ppc.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/w_sqrt.o"),
            Object(Matching, "MSL_C.PPCEABI.bare.H.a/extras.o"),
        ],
    },
    {
        "lib": "amcstubs.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "amcstubs.a/AmcExi2Stubs.o"),
        ],
    },
    {
        "lib": "odenotstub.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "odenotstub.a/odenotstub.o"),
        ],
    },
    {
        "lib": "OdemuExi2.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "OdemuExi2.a/DebuggerDriver.o"),
        ],
    },
    {
        "lib": "exi.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "exi.a/EXIBios.o"),
            Object(Matching, "exi.a/EXIUart.o"),
        ],
    },
    {
        "lib": "si.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "si.a/SIBios.o"),
            Object(Matching, "si.a/SISamplingRate.o"),
        ],
    },
    {
        "lib": "GScamera.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GScamera.a/GScamera.o"),
        ],
    },
    {
        "lib": "GSlight.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSlight.a/GSlight.o"),
        ],
    },
    {
        "lib": "GSmaterial.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSmaterial.a/GSmaterial.o"),
        ],
    },
    {
        "lib": "GSmath.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSmath.a/GSmtx.o"),
            Object(Matching, "GSmath.a/GSmtx44.o"),
            Object(Matching, "GSmath.a/GSquat.o"),
            Object(Matching, "GSmath.a/init.o"),
            Object(Matching, "GSmath.a/GSbezier.o"),
            Object(Matching, "GSmath.a/GSlerp.o"),
            Object(Matching, "GSmath.a/GSutil.o"),
            Object(Matching, "GSmath.a/GSvec.o"),
        ],
    },
    {
        "lib": "GSmodel.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSmodel.a/effects.o"),
            Object(Matching, "GSmodel.a/blend.o"),
            Object(Matching, "GSmodel.a/bound.o"),
            Object(Matching, "GSmodel.a/animation.o"),
            Object(Matching, "GSmodel.a/GSmodel.o"),
            Object(Matching, "GSmodel.a/GSmodelExt.o"),
            Object(Matching, "GSmodel.a/parse.o"),
            Object(Matching, "GSmodel.a/part.o"),
            Object(Matching, "GSmodel.a/save_state.o"),
            Object(Matching, "GSmodel.a/shadow.o"),
            Object(Matching, "GSmodel.a/bank.o"),
        ],
    },
    {
        "lib": "GSpart.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSpart.a/GSpart.o"),
        ],
    },
    {
        "lib": "GSscratch.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSscratch.a/GSscratch.o"),
        ],
    },
    {
        "lib": "GStexture.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GStexture.a/GStexture.o"),
        ],
    },
    {
        "lib": "GSthread.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSthread.a/GSthread.o"),
        ],
    },
    {
        "lib": "GSinput.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSinput.a/GSinput.o"),
        ],
    },
    {
        "lib": "GSres.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSres.a/GSres.o"),
        ],
    },
    {
        "lib": "GSmsg.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSmsg.a/GSmsg.o"),
            Object(Matching, "GSmsg.a/sprite.o"),
        ],
    },
    {
        "lib": "kaisuu.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "kaisuu.a/kaisuuData.o"),
            Object(Matching, "kaisuu.a/kaisuu.o"),
            Object(Matching, "kaisuu.a/kaisuuBios.o"),
        ],
    },
    {
        "lib": "GSgapp.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSgapp.a/GSgapp.o"),
        ],
    },
    {
        "lib": "menu.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "menu.a/winSprite.o"),
            Object(Matching, "menu.a/menu.o"),
            Object(Matching, "menu.a/menuFace.o"),
            Object(Matching, "menu.a/menuFaceBios.o"),
            Object(Matching, "menu.a/menuModel.o"),
            Object(Matching, "menu.a/menuOffScreen.o"),
            Object(Matching, "menu.a/window.o"),
            Object(Matching, "menu.a/cursorBios.o"),
            Object(Matching, "menu.a/winMsg.o"),
        ],
    },
    {
        "lib": "zokusei.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "zokusei.a/zokusei.o"),
            Object(Matching, "zokusei.a/zokuseiBios.o"),
        ],
    },
    {
        "lib": "GScolsys.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GScolsys.a/GScolsys2.o"),
            Object(Matching, "GScolsys.a/GScolsys2Draw.o"),
            Object(Matching, "GScolsys.a/GScolsys2Walk.o"),
            Object(Matching, "GScolsys.a/GScolsys2Hit.o"),
            Object(Matching, "GScolsys.a/GScolsys2Util.o"),
            Object(Matching, "GScolsys.a/GScolsys2Human.o"),
            Object(Matching, "GScolsys.a/GScolsys2Thru.o"),
            Object(Matching, "GScolsys.a/GScolsys2Check.o"),
            Object(Matching, "GScolsys.a/GScolsys2Sun.o"),
        ],
    },
    {
        "lib": "floor.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "floor.a/floor.o"),
            Object(Matching, "floor.a/floorEvent.o"),
            Object(Matching, "floor.a/floorCharacterBios.o"),
            Object(Matching, "floor.a/floorDataBios.o"),
            Object(Matching, "floor.a/floorFieldCamera.o"),
            Object(Matching, "floor.a/floorFieldCameraEditor.o"),
            Object(Matching, "floor.a/floorOffscreen.o"),
            Object(Matching, "floor.a/floorManager.o"),
            Object(Matching, "floor.a/floorModule.o"),
            Object(Matching, "floor.a/floorStack.o"),
            Object(Matching, "floor.a/floorLoad.o"),
            Object(Matching, "floor.a/floorScript.o"),
            Object(Matching, "floor.a/floorsound.o"),
        ],
    },
    {
        "lib": "GSparticle.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSparticle.a/GSparticle.o"),
            Object(Matching, "GSparticle.a/peParticle.o"),
            Object(Matching, "GSparticle.a/peNode.o"),
            Object(Matching, "GSparticle.a/peBank.o"),
            Object(Matching, "GSparticle.a/peEmitter.o"),
            Object(Matching, "GSparticle.a/peModel.o"),
            Object(Matching, "GSparticle.a/peContainer.o"),
            Object(Matching, "GSparticle.a/peDistortion.o"),
            Object(Matching, "GSparticle.a/peParticleStrip.o"),
            Object(Matching, "GSparticle.a/peSpline.o"),
            Object(Matching, "GSparticle.a/particleEngine.o"),
            Object(Matching, "GSparticle.a/peShape.o"),
        ],
    },
    {
        "lib": "joutai.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "joutai.a/joutaiData.o"),
            Object(Matching, "joutai.a/joutai.o"),
            Object(Matching, "joutai.a/joutaiBios.o"),
        ],
    },
    {
        "lib": "waza.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "waza.a/waza.o"),
            Object(Matching, "waza.a/wazaFuncData.o"),
            Object(Matching, "waza.a/wazaBios.o"),
            Object(Matching, "waza.a/wazaDB.o"),
        ],
    },
    {
        "lib": "pokemon.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "pokemon.a/pokemonGrowData.o"),
            Object(Matching, "pokemon.a/pokemonTokuseiData.o"),
            Object(Matching, "pokemon.a/pokemonFriendFilterData.o"),
            Object(Matching, "pokemon.a/pokemonNakigoeData.o"),
            Object(Matching, "pokemon.a/pokemonWaveDispData.o"),
            Object(Matching, "pokemon.a/pokemon.o"),
            Object(Matching, "pokemon.a/pokemonBios.o"),
            Object(Matching, "pokemon.a/pokemonDB.o"),
            Object(Matching, "pokemon.a/pokemonEvolution.o"),
            Object(Matching, "pokemon.a/pokemonStatusFightoutPokemon.o"),
            Object(Matching, "pokemon.a/pokemonStatusFightPokemon.o"),
            Object(Matching, "pokemon.a/pokemonStatusPokemon.o"),
            Object(Matching, "pokemon.a/darkPokemon.o"),
            Object(Matching, "pokemon.a/darkPokemonList.o"),
            Object(Matching, "pokemon.a/darkPokemonBios.o"),
        ],
    },
    {
        "lib": "hero.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "hero.a/hero.o"),
            Object(Matching, "hero.a/heroBios.o"),
            Object(Matching, "hero.a/heroMove.o"),
            Object(Matching, "hero.a/heroPokemonGet.o"),
            Object(Matching, "hero.a/heroMemberFunctions.o"),
        ],
    },
    {
        "lib": "GSeffect.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSeffect.a/GSeffect.o"),
        ],
    },
    {
        "lib": "sex.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "sex.a/sexdata.o"),
            Object(Matching, "sex.a/sex.o"),
        ],
    },
    {
        "lib": "msgctrl.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "msgctrl.a/msgctrlcode.o"),
            Object(Matching, "msgctrl.a/msgctrl.o"),
        ],
    },
    {
        "lib": "dbgMenu.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "dbgMenu.a/dbgMenu.o"),
        ],
    },
    {
        "lib": "pcbox.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "pcbox.a/pcbox.o"),
        ],
    },
    {
        "lib": "gamedata.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "gamedata.a/gamedatasaveBios.o"),
            Object(Matching, "gamedata.a/gamedataBios.o"),
            Object(Matching, "gamedata.a/gamedata.o"),
        ],
    },
    {
        "lib": "status.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "status.a/status.o"),
        ],
    },
    {
        "lib": "kouka.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "kouka.a/koukaData.o"),
            Object(Matching, "kouka.a/koukaLinkData.o"),
            Object(Matching, "kouka.a/kouka.o"),
            Object(Matching, "kouka.a/koukaBios.o"),
        ],
    },
    {
        "lib": "tenkou.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "tenkou.a/tenkouData.o"),
            Object(Matching, "tenkou.a/tenkouBios.o"),
        ],
    },
    {
        "lib": "tikei.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "tikei.a/tikeiData.o"),
            Object(Matching, "tikei.a/tikeiBios.o"),
        ],
    },
    {
        "lib": "effects.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "effects.a/filter.o"),
            Object(Matching, "effects.a/envMap.o"),
            Object(Matching, "effects.a/blur.o"),
            Object(Matching, "effects.a/glow.o"),
        ],
    },
    {
        "lib": "item.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "item.a/itemBallData.o"),
            Object(Matching, "item.a/itemSoubiData.o"),
            Object(Matching, "item.a/tasteData.o"),
            Object(Matching, "item.a/itemWazaMachineNo.o"),
            Object(Matching, "item.a/itemParam.o"),
            Object(Matching, "item.a/item.o"),
            Object(Matching, "item.a/itemBios.o"),
            Object(Matching, "item.a/itemDB.o"),
            Object(Matching, "item.a/itemUse2Pokemon.o"),
            Object(Matching, "item.a/itemFightItem.o"),
        ],
    },
    {
        "lib": "musyx.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "musyx.a/seq.o"),
            Object(Matching, "musyx.a/synth.o"),
            Object(Matching, "musyx.a/seq_api.o"),
            Object(Matching, "musyx.a/snd_synthapi.o"),
            Object(Matching, "musyx.a/stream.o"),
            Object(Matching, "musyx.a/synthdata.o"),
            Object(Matching, "musyx.a/synthmacros.o"),
            Object(Matching, "musyx.a/synthvoice.o"),
            Object(Matching, "musyx.a/synth_ac.o"),
            Object(Matching, "musyx.a/synth_dbtab.o"),
            Object(Matching, "musyx.a/synth_adsr.o"),
            Object(Matching, "musyx.a/synth_vsamples.o"),
            Object(Matching, "musyx.a/s_data.o"),
            Object(Matching, "musyx.a/hw_dspctrl.o"),
            Object(Matching, "musyx.a/hw_volconv.o"),
            Object(Matching, "musyx.a/snd3d.o"),
            Object(Matching, "musyx.a/snd_init.o"),
            Object(Matching, "musyx.a/snd_math.o"),
            Object(Matching, "musyx.a/snd_midictrl.o"),
            Object(Matching, "musyx.a/snd_service.o"),
            Object(Matching, "musyx.a/hardware.o"),
            Object(Matching, "musyx.a/dsp_import.o"),
            Object(Matching, "musyx.a/hw_aramdma.o"),
            Object(Matching, "musyx.a/hw_dolphin.o"),
            Object(Matching, "musyx.a/hw_memory.o"),
            Object(Matching, "musyx.a/reverb_fx.o"),
            Object(Matching, "musyx.a/reverb.o"),
        ],
    },
    {
        "lib": "sound.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "sound.a/sound.o"),
        ],
    },
    {
        "lib": "GSsnd.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSsnd.a/GSsnd.o"),
            Object(Matching, "GSsnd.a/sndStream.o"),
        ],
    },
    {
        "lib": "GSdvd.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSdvd.a/GSdvd.o"),
        ],
    },
    {
        "lib": "GSfilter.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSfilter.a/GSfilter.o"),
        ],
    },
    {
        "lib": "hsdparticle_gs.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "hsdparticle_gs.a/pslist.o"),
            Object(Matching, "hsdparticle_gs.a/particle.o"),
            Object(Matching, "hsdparticle_gs.a/psappsrt.o"),
            Object(Matching, "hsdparticle_gs.a/psdisp.o"),
            Object(Matching, "hsdparticle_gs.a/psdisptev.o"),
            Object(Matching, "hsdparticle_gs.a/psinterpret.o"),
            Object(Matching, "hsdparticle_gs.a/generator.o"),
        ],
    },
    {
        "lib": "GSspline.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSspline.a/GSspline.o"),
        ],
    },
    {
        "lib": "camera.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "camera.a/camera.o"),
        ],
    },
    {
        "lib": "GSfsys.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSfsys.a/fsysStream.o"),
            Object(Matching, "GSfsys.a/fsysBlock.o"),
            Object(Matching, "GSfsys.a/fsysCache.o"),
            Object(Matching, "GSfsys.a/fsysRead.o"),
            Object(Matching, "GSfsys.a/fsysAlloc.o"),
            Object(Matching, "GSfsys.a/GSfsys2.o"),
        ],
    },
    {
        "lib": "GSflag.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSflag.a/GSflag.o"),
        ],
    },
    {
        "lib": "GSbound.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSbound.a/GSbound.o"),
        ],
    },
    {
        "lib": "battleGrid.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "battleGrid.a/battleGrid.o"),
            Object(Matching, "battleGrid.a/wazaSequenceCamera.o"),
            Object(Matching, "battleGrid.a/wazaSequenceCameraData.o"),
            Object(Matching, "battleGrid.a/battleCamera.o"),
        ],
    },
    {
        "lib": "fade.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fade.a/fade.o"),
            Object(Matching, "fade.a/fade_effect.o"),
            Object(Matching, "fade.a/fade_fluid.o"),
        ],
    },
    {
        "lib": "script.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "script.a/appScript.o"),
            Object(Matching, "script.a/objCamera.o"),
            Object(Matching, "script.a/objFloor.o"),
            Object(Matching, "script.a/objHero.o"),
            Object(Matching, "script.a/objMenu.o"),
            Object(Matching, "script.a/objPeople.o"),
            Object(Matching, "script.a/script.o"),
            Object(Matching, "script.a/scriptModel.o"),
            Object(Matching, "script.a/contSave.o"),
        ],
    },
    {
        "lib": "memcard.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "memcard.a/memcard.o"),
            Object(Matching, "memcard.a/savedata.o"),
            Object(Matching, "memcard.a/savedataBios.o"),
        ],
    },
    {
        "lib": "recovery.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "recovery.a/recovery.o"),
            Object(Matching, "recovery.a/recoveryEvent.o"),
        ],
    },
    {
        "lib": "mail.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "mail.a/mailMain.o"),
            Object(Matching, "mail.a/mail.o"),
        ],
    },
    {
        "lib": "wazaSequence.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "wazaSequence.a/wazaViewer.o"),
            Object(Matching, "wazaSequence.a/wazaWZXData.o"),
            Object(Matching, "wazaSequence.a/trainerPKXData.o"),
            Object(Matching, "wazaSequence.a/pokemonPKXData.o"),
            Object(Matching, "wazaSequence.a/wazaGenericWZXData.o"),
            Object(Matching, "wazaSequence.a/wazaExtWZXData.o"),
            Object(Matching, "wazaSequence.a/pokemonWazaWZXData.o"),
            Object(Matching, "wazaSequence.a/unknownPokemonPKXData.o"),
            Object(Matching, "wazaSequence.a/rarePokemonPKXData.o"),
            Object(Matching, "wazaSequence.a/wazaSequence.o"),
            Object(Matching, "wazaSequence.a/wazaSequenceSys.o"),
            Object(Matching, "wazaSequence.a/modelSequence.o"),
            Object(Matching, "wazaSequence.a/nullSequence.o"),
            Object(Matching, "wazaSequence.a/wazaResourceData.o"),
            Object(Matching, "wazaSequence.a/wazaSequenceEntry.o"),
            Object(Matching, "wazaSequence.a/deoxyspokemonPKXData.o"),
            Object(Matching, "wazaSequence.a/rareDeoxysPokemonPKXData.o"),
            Object(Matching, "wazaSequence.a/pachiru.o"),
            Object(Matching, "wazaSequence.a/leaffx.o"),
            Object(Matching, "wazaSequence.a/billboard.o"),
            Object(Matching, "wazaSequence.a/effects.o"),
            Object(Matching, "wazaSequence.a/boneFill.o"),
        ],
    },
    {
        "lib": "etctools.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "etctools.a/etctools.o"),
        ],
    },
    {
        "lib": "GSvtr.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSvtr.a/GSvtr.o"),
        ],
    },
    {
        "lib": "GSmovie.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSmovie.a/movieStream.o"),
            Object(Matching, "GSmovie.a/GSmovie.o"),
            Object(Matching, "GSmovie.a/THPDraw.o"),
            Object(Matching, "GSmovie.a/THPDec.o"),
            Object(Matching, "GSmovie.a/THPAudio.o"),
        ],
    },
    {
        "lib": "sodateya.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "sodateya.a/sodateya.o"),
        ],
    },
    {
        "lib": "GSlensFlare.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSlensFlare.a/GSlensFlare.o"),
        ],
    },
    {
        "lib": "fight.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fight.a/fightMain.o"),
            Object(Matching, "fight.a/fightKind.o"),
            Object(Matching, "fight.a/fightTarget.o"),
            Object(Matching, "fight.a/fightType.o"),
            Object(Matching, "fight.a/fightWaza.o"),
            Object(Matching, "fight.a/fightWazaBios.o"),
            Object(Matching, "fight.a/fightEncount.o"),
            Object(Matching, "fight.a/fightEncountBios.o"),
            Object(Matching, "fight.a/fightFloor.o"),
            Object(Matching, "fight.a/fightFloorBios.o"),
            Object(Matching, "fight.a/fightFloorDB.o"),
            Object(Matching, "fight.a/fightSideBios.o"),
            Object(Matching, "fight.a/fightSide.o"),
            Object(Matching, "fight.a/fightSideDB.o"),
            Object(Matching, "fight.a/fightTrainer.o"),
            Object(Matching, "fight.a/fightTrainerBios.o"),
            Object(Matching, "fight.a/fightTrainerDB.o"),
            Object(Matching, "fight.a/fightTrainerEnemy.o"),
            Object(Matching, "fight.a/fightItemBios.o"),
            Object(Matching, "fight.a/fightItem.o"),
            Object(Matching, "fight.a/fightPokemon.o"),
            Object(Matching, "fight.a/fightPokemonBios.o"),
            Object(Matching, "fight.a/fightPokemonEnemy.o"),
            Object(Matching, "fight.a/fightActionBios.o"),
            Object(Matching, "fight.a/fightAction.o"),
            Object(Matching, "fight.a/fightActionFlow.o"),
            Object(Matching, "fight.a/fightActionDisp.o"),
            Object(Matching, "fight.a/fightKouka.o"),
            Object(Matching, "fight.a/fightKoukaBios.o"),
            Object(Matching, "fight.a/fightJouken.o"),
            Object(Matching, "fight.a/fightJoukenBios.o"),
            Object(Matching, "fight.a/fightAbicnt.o"),
            Object(Matching, "fight.a/fight.o"),
            Object(Matching, "fight.a/fightEncountWipeData.o"),
        ],
    },
    {
        "lib": "fightData.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fightData.a/fightJoukenData.o"),
            Object(Matching, "fightData.a/fightJoukenLinkData.o"),
            Object(Matching, "fightData.a/fightTargetData.o"),
            Object(Matching, "fightData.a/fightActionKindData.o"),
            Object(Matching, "fightData.a/fightActionData_waza.o"),
            Object(Matching, "fightData.a/fightKoukaData.o"),
            Object(Matching, "fightData.a/fightWazaCriticalData.o"),
            Object(Matching, "fightData.a/fightActionData_kaisi.o"),
            Object(Matching, "fightData.a/fightAbicntData.o"),
            Object(Matching, "fightData.a/fightActionData_turn.o"),
            Object(Matching, "fightData.a/fightActionData_item.o"),
            Object(Matching, "fightData.a/fightActionData_syuuryou.o"),
            Object(Matching, "fightData.a/fightWazaHitKakurituData.o"),
            Object(Matching, "fightData.a/fightTrainerAi_ComboId.o"),
        ],
    },
    {
        "lib": "fightSeq.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fightSeq.a/fightSeqItem.o"),
            Object(Matching, "fightSeq.a/fightSeqWaza.o"),
            Object(Matching, "fightSeq.a/fightSeqWSWaza.o"),
            Object(Matching, "fightSeq.a/fightSeqBasis.o"),
            Object(Matching, "fightSeq.a/fightSeqItemseq.o"),
            Object(Matching, "fightSeq.a/fightSeqMsg.o"),
            Object(Matching, "fightSeq.a/fightSeqSpAction.o"),
            Object(Matching, "fightSeq.a/fightSeqStatus.o"),
            Object(Matching, "fightSeq.a/fightSeqWazaseq.o"),
            Object(Matching, "fightSeq.a/fightSeq.o"),
            Object(Matching, "fightSeq.a/fightWazaWzx.o"),
        ],
    },
    {
        "lib": "fightAi2.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fightAi2.a/fightTrainerAi2.o"),
            Object(Matching, "fightAi2.a/fightTrainerAiWazaHit.o"),
        ],
    },
    {
        "lib": "toolentry.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "toolentry.a/toolentry.o"),
        ],
    },
    {
        "lib": "tableRes.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "tableRes.a/tableResBios.o"),
        ],
    },
    {
        "lib": "pokemonRelive.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "pokemonRelive.a/pokemonRelive.o"),
            Object(Matching, "pokemonRelive.a/pokemonWazaSequenceDisplay.o"),
        ],
    },
    {
        "lib": "gba.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "gba.a/GBA.o"),
            Object(Matching, "gba.a/GBARead.o"),
            Object(Matching, "gba.a/GBAWrite.o"),
            Object(Matching, "gba.a/GBAXfer.o"),
        ],
    },
    {
        "lib": "memo.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "memo.a/memo.o"),
        ],
    },
    {
        "lib": "evolution.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "evolution.a/evolution.o"),
        ],
    },
    {
        "lib": "charName.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "charName.a/charNameBios.o"),
        ],
    },
    {
        "lib": "fightGSfloor.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fightGSfloor.a/fightGSfloor.o"),
        ],
    },
    {
        "lib": "fightMenu.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fightMenu.a/fightMenu.o"),
        ],
    },
    {
        "lib": "fightTimer.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fightTimer.a/fightTimer.o"),
        ],
    },
    {
        "lib": "d2present.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "d2present.a/d2present.o"),
        ],
    },
    {
        "lib": "GSScript.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSScript.a/tiga.o"),
            Object(Matching, "GSScript.a/tvariant.o"),
            Object(Matching, "GSScript.a/chank.o"),
            Object(Matching, "GSScript.a/defobj.o"),
        ],
    },
    {
        "lib": "GSnetwork.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSnetwork.a/GSnetwork.o"),
        ],
    },
    {
        "lib": "effectEditor.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "effectEditor.a/effectEditor.o"),
        ],
    },
    {
        "lib": "hsdbase_gs.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "hsdbase_gs.a/wobj.o"),
            Object(Matching, "hsdbase_gs.a/archive.o"),
            Object(Matching, "hsdbase_gs.a/bytecode.o"),
            Object(Matching, "hsdbase_gs.a/class.o"),
            Object(Matching, "hsdbase_gs.a/cobj.o"),
            Object(Matching, "hsdbase_gs.a/debug.o"),
            Object(Matching, "hsdbase_gs.a/displayfunc.o"),
            Object(Matching, "hsdbase_gs.a/dobj.o"),
            Object(Matching, "hsdbase_gs.a/fobj.o"),
            Object(Matching, "hsdbase_gs.a/fog.o"),
            Object(Matching, "hsdbase_gs.a/hash.o"),
            Object(Matching, "hsdbase_gs.a/id.o"),
            Object(Matching, "hsdbase_gs.a/initialize.o"),
            Object(Matching, "hsdbase_gs.a/jobj.o"),
            Object(Matching, "hsdbase_gs.a/list.o"),
            Object(Matching, "hsdbase_gs.a/lobj.o"),
            Object(Matching, "hsdbase_gs.a/memory.o"),
            Object(Matching, "hsdbase_gs.a/mobj.o"),
            Object(Matching, "hsdbase_gs.a/mtx.o"),
            Object(Matching, "hsdbase_gs.a/objalloc.o"),
            Object(Matching, "hsdbase_gs.a/object.o"),
            Object(Matching, "hsdbase_gs.a/pobj.o"),
            Object(Matching, "hsdbase_gs.a/quatlib.o"),
            Object(Matching, "hsdbase_gs.a/random.o"),
            Object(Matching, "hsdbase_gs.a/robj.o"),
            Object(Matching, "hsdbase_gs.a/shadow.o"),
            Object(Matching, "hsdbase_gs.a/spline.o"),
            Object(Matching, "hsdbase_gs.a/state.o"),
            Object(Matching, "hsdbase_gs.a/tev.o"),
            Object(Matching, "hsdbase_gs.a/texp.o"),
            Object(Matching, "hsdbase_gs.a/texpdag.o"),
            Object(Matching, "hsdbase_gs.a/texpopt.o"),
            Object(Matching, "hsdbase_gs.a/tobj.o"),
            Object(Matching, "hsdbase_gs.a/util.o"),
            Object(Matching, "hsdbase_gs.a/aobj.o"),
        ],
    },
    {
        "lib": "flashmenu.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "flashmenu.a/flashmenu.o"),
            Object(Matching, "flashmenu.a/flashcalc.o"),
            Object(Matching, "flashmenu.a/vecGraph.o"),
            Object(Matching, "flashmenu.a/flashsystem.o"),
        ],
    },
    {
        "lib": "gimmickD.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "gimmickD.a/gimmickBox.o"),
        ],
    },
    {
        "lib": "GSprim.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSprim.a/GSprim.o"),
            Object(Matching, "GSprim.a/2d.o"),
            Object(Matching, "GSprim.a/text.o"),
        ],
    },
    {
        "lib": "GSshape.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSshape.a/shapeAnim.o"),
            Object(Matching, "GSshape.a/shapeObject.o"),
            Object(Matching, "GSshape.a/shapeRender.o"),
            Object(Matching, "GSshape.a/GSshape.o"),
        ],
    },
    {
        "lib": "deck.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "deck.a/deck.o"),
            Object(Matching, "deck.a/deckGroupData.o"),
            Object(Matching, "deck.a/deckDataVirtualBios.o"),
        ],
    },
    {
        "lib": "reliveHall.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "reliveHall.a/reliveHall.o"),
        ],
    },
    {
        "lib": "ant.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "ant.a/ant.o"),
        ],
    },
    {
        "lib": "mball.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "mball.a/mballBios.o"),
        ],
    },
    {
        "lib": "ribbon.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "ribbon.a/ribbon.o"),
            Object(Matching, "ribbon.a/exribbon.o"),
        ],
    },
    {
        "lib": "light.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "light.a/lightEditor.o"),
            Object(Matching, "light.a/light.o"),
        ],
    },
    {
        "lib": "esaba.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "esaba.a/esaba.o"),
        ],
    },
    {
        "lib": "undertaker.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "undertaker.a/undertaker.o"),
            Object(Matching, "undertaker.a/undertakerBios.o"),
        ],
    },
    {
        "lib": "bingo.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "bingo.a/bingoBios.o"),
        ],
    },
    {
        "lib": "people.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "people.a/peopleInfoBios.o"),
            Object(Matching, "people.a/peopleBios.o"),
            Object(Matching, "people.a/people.o"),
            Object(Matching, "people.a/peopleViewer.o"),
            Object(Matching, "people.a/peoplePartAnimation.o"),
            Object(Matching, "people.a/peopleSave.o"),
            Object(Matching, "people.a/peopleTalk.o"),
            Object(Matching, "people.a/peopleWalkList.o"),
            Object(Matching, "people.a/peopleMemberFunc.o"),
            Object(Matching, "people.a/peopleColision.o"),
        ],
    },
    {
        "lib": "mewwaza.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "mewwaza.a/mewwazadata.o"),
            Object(Matching, "mewwaza.a/mewwaza.o"),
        ],
    },
    {
        "lib": "GSstream.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSstream.a/GSstream.o"),
        ],
    },
    {
        "lib": "GSlogM.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSlogM.a/GSlog.o"),
        ],
    },
    {
        "lib": "GSgfxM.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "GSgfxM.a/backfb.o"),
            Object(Matching, "GSgfxM.a/GSgfx.o"),
            Object(Matching, "GSgfxM.a/layer.o"),
            Object(Matching, "GSgfxM.a/render.o"),
            Object(Matching, "GSgfxM.a/perfbar.o"),
            Object(Matching, "GSgfxM.a/token.o"),
            Object(Matching, "GSgfxM.a/project.o"),
            Object(Matching, "GSgfxM.a/halt.o"),
            Object(Matching, "GSgfxM.a/video.o"),
            Object(Matching, "GSgfxM.a/gpu.o"),
            Object(Matching, "GSgfxM.a/vf.o"),
            Object(Matching, "GSgfxM.a/dl.o"),
            Object(Matching, "GSgfxM.a/layerState.o"),
            Object(Matching, "GSgfxM.a/matrixStack.o"),
            Object(Matching, "GSgfxM.a/layerFunc.o"),
            Object(Matching, "GSgfxM.a/renderModule.o"),
            Object(Matching, "GSgfxM.a/c_func.o"),
            Object(Matching, "GSgfxM.a/layerConfig.o"),
            Object(Matching, "GSgfxM.a/light.o"),
            Object(Matching, "GSgfxM.a/layerEffect.o"),
            Object(Matching, "GSgfxM.a/gamecube.o"),
            Object(Matching, "GSgfxM.a/screenshot.o"),
            Object(Matching, "GSgfxM.a/capture.o"),
            Object(Matching, "GSgfxM.a/reset.o"),
        ],
    },
    {
        "lib": "fightAiM.a",
        "mw_version": config.linker_version,
        "cflags": cflags_runtime,
        "host": False,
        "objects": [
            Object(Matching, "fightAiM.a/fightTrainerAi.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiCombo.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiItem.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiIrekae.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiComboFunc.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiWaza.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiWazaDamage.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiWazaDamageFightPokemon.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiWazaValue.o"),
            Object(Matching, "fightAiM.a/fightTrainerAi_ExpectWazaDat.o"),
            Object(Matching, "fightAiM.a/fightTrainerAiComboContinueFunc.o"),
        ],
    },
]

if args.mode == "configure":
    # Write build.ninja and objdiff.json
    generate_build(config)
elif args.mode == "progress":
    # Print progress and write progress.json
    config.progress_each_module = args.verbose
    calculate_progress(config)
else:
    sys.exit("Unknown mode: " + args.mode)
